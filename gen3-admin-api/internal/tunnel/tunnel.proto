syntax = "proto3";

package tunnel;

option go_package = "./;tunnel";

// Service for communication between the server and agent
service TunnelService {
  // Bidirectional streaming RPC for maintaining a persistent connection
  rpc Connect (stream AgentMessage) returns (stream ServerMessage) {}
}

// Message sent by the agent
message AgentMessage {
  oneof message {
    RegistrationRequest registration = 1; // Initial registration
    StatusUpdate status = 2;              // Periodic status updates
    ProxyResponse proxy = 3;              // Proxy responses
    HelmValuesResponse helmValues = 4;              // Helm values responses
  }
}

// Message sent by the server
message ServerMessage {
  oneof message {
    RegistrationResponse registration = 1; // Response to registration
    StatusUpdate status = 2;               // Server status updates
    ProxyRequest proxy = 3;                // Proxy requests
    ProjectsRequest projects = 4;          // Projects request
    HelmValuesRequest  helmValuesRequest = 5;          // Helm values request
  }
}

// Agent registration request
message RegistrationRequest {
  string agent_name = 1;
  string agent_version = 2;
}

// Server registration response
message RegistrationResponse {
  bool success = 1;
  string message = 2; // Optional message on success or failure
}

// Status update (for both agent and server)
message StatusUpdate {
  double cpu_usage = 1;
  double memory_usage = 2;
  string health_status = 3;
  string provider = 4;
  string k8s_version = 5;
  int32 pod_capacity = 6;
  int32 pod_count = 7;
}

// ProxyRequest sent by the server to the agent
message ProxyRequest {
  string stream_id = 1;
  string method = 2;
  string path = 3;
  map<string, string> headers = 4;
  bytes body = 5;
  string proxy_type = 6;
}

// ProxyResponse sent by the agent to the server
message ProxyResponse {
  string stream_id = 1;
  ProxyResponseType status = 2;
  int32 status_code = 3;
  map<string, string> headers = 4;
  bytes body = 5;
}

// Status of the proxy response
enum ProxyResponseType {
  UNKNOWN = 0;
  HEADERS = 1;
  DATA = 2;
  END = 3;
  ERROR = 4;
}

// ProjectsResponse sent by the agent to the server
message ProjectsResponse {
  repeated Project projects = 1;
}

message ProjectsRequest {
  string stream_id = 1;
}

message HelmValuesRequest {
  string stream_id = 1;
  string release = 2;
  string namespace = 3;
}




message HelmValuesResponse {
  repeated string values = 1;
}

message Project {
  string name = 1;
  string status = 2;
  string namespace = 3;
  string version = 4;
  string created_at = 5;
}
