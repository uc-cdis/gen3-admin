syntax = "proto3";

package tunnel;

option go_package = "./;tunnel";

// Service for communication between the server and agent
service TunnelService {
  // Bidirectional streaming RPC for maintaining a persistent connection
  rpc Connect (stream AgentMessage) returns (stream ServerMessage) {}
}

// Message sent by the agent
message AgentMessage {
  oneof message {
    RegistrationRequest registration = 1; // Initial registration
    StatusUpdate status = 2;              // Periodic status updates
    ProxyResponse proxy = 3;              // Proxy responses
    HelmValuesResponse helmValues = 4;              // Helm values responses
    HelmDeleteResponse helmDelete = 5;              // Helm delete responses
    HelmInstallResponse helmInstall = 6;              // Helm install responses
    TerminalStream terminalStream = 7;
    PgWebResponse pgwebResponse = 8;
  }
}

// Message sent by the server
message ServerMessage {
  oneof message {
    RegistrationResponse registration = 1; // Response to registration
    StatusUpdate status = 2;               // Server status updates
    ProxyRequest proxy = 3;                // Proxy requests
    ProjectsRequest projects = 4;          // Projects request
    HelmValuesRequest  helmValuesRequest = 5;          // Helm values request
    HelmDeleteRequest helmDeleteRequest = 6;          // Helm delete request
    HelmInstallRequest helmInstallRequest = 7;          // Helm install request
    TerminalStream terminalStream = 8;
    DbUiRequest dbuiRequest = 9;
  }
}

// Agent registration request
message RegistrationRequest {
  string agent_name = 1;
  string agent_version = 2;
}

// Server registration response
message RegistrationResponse {
  bool success = 1;
  string message = 2; // Optional message on success or failure
}

// Status update (for both agent and server)
message StatusUpdate {
  double cpu_usage = 1;
  double memory_usage = 2;
  string health_status = 3;
  string provider = 4;
  string k8s_version = 5;
  int32 pod_capacity = 6;
  int32 pod_count = 7;
}

// ProxyRequest sent by the server to the agent
message ProxyRequest {
  string stream_id = 1;
  string method = 2;
  string path = 3;
  map<string, string> headers = 4;
  bytes body = 5;
  string proxy_type = 6;
}

// ProxyResponse sent by the agent to the server
message ProxyResponse {
  string stream_id = 1;
  ProxyResponseType status = 2;
  int32 status_code = 3;
  map<string, string> headers = 4;
  bytes body = 5;
}

// Status of the proxy response
enum ProxyResponseType {
  UNKNOWN = 0;
  HEADERS = 1;
  DATA = 2;
  END = 3;
  ERROR = 4;
}

// ProjectsResponse sent by the agent to the server
message ProjectsResponse {
  repeated Project projects = 1;
}

message ProjectsRequest {
  string stream_id = 1;
}

message HelmValuesRequest {
  string stream_id = 1;
  string release = 2;
  string namespace = 3;
}

message HelmDeleteRequest {
  string stream_id = 1;
  string release = 2;
  string namespace = 3;
}


message HelmInstallRequest {
  string stream_id = 1;

  // Helm chart information
  string chart = 2;

  // Release name
  string release = 3;

  // Namespace
  string namespace = 4;

  // Values file
  bytes values = 5;

  // Repo name
  string repo = 6;

  // Repo url
  string repoUrl = 7;

  // Chart version
  string version = 8;

  // Wait for the release to be ready
  bool wait = 9;

  // Timeout for the release to be ready
  int64 timeout = 10;

  // Create namespace if it doesn't exist
  bool create_namespace = 11;

}

message HelmDeleteResponse {
  string stream_id = 1;
}

message HelmValuesResponse {
  repeated string values = 1;
}

message HelmInstallResponse {
  string stream_id = 1;
}

message Project {
  string name = 1;
  string status = 2;
  string namespace = 3;
  string version = 4;
  string created_at = 5;
}


message TerminalStream {
  bytes data = 1;
  string session_id = 2; // optional
}

// Message to launch pgweb
message DbUiRequest {
  string stream_id = 1;
  string db_name = 2;           // Database name (used to find <dbname>-creds secret)
  string namespace = 3;         // Kubernetes namespace (optional, defaults to "default")
  map<string, string> labels = 4; // Additional labels for the pod
  string db_type = 5;
}

message PgWebResponse {
  bool success = 1;
  string message = 2;
  string pod_name = 3;         // Name of the created pod
  string service_name = 4;     // Name of the created service
  int32 port = 5;             // Port the service is running on
}

// Message to stop/cleanup pgweb resources
message StopPgWebRequest {
  string db_name = 1;
  string namespace = 2;
}

message StopPgWebResponse {
  bool success = 1;
  string message = 2;
}
